import secrets

class Cipher:
	# change the Sbox
	sbox = [0xaa,0xa9,0xac,0xaf,0xae,0xad,0xa8,0xab,0xa1,0xa2,0xa7,0xa4,0xa5,0xa6,0xa3,0xa0,0x9a,0x99,0x9c,0x9f,0x9e,0x9d,0x98,0x9b,0x91,0x92,0x97,0x94,0x95,0x96,0x93,0x90,0xca,0xc9,0xcc,0xcf,0xce,0xcd,0xc8,0xcb,0xc1,0xc2,0xc7,0xc4,0xc5,0xc6,0xc3,0xc0,0xfa,0xf9,0xfc,0xff,0xfe,0xfd,0xf8,0xfb,0xf1,0xf2,0xf7,0xf4,0xf5,0xf6,0xf3,0xf0,0xea,0xe9,0xec,0xef,0xee,0xed,0xe8,0xeb,0xe1,0xe2,0xe7,0xe4,0xe5,0xe6,0xe3,0xe0,0xda,0xd9,0xdc,0xdf,0xde,0xdd,0xd8,0xdb,0xd1,0xd2,0xd7,0xd4,0xd5,0xd6,0xd3,0xd0,0x8a,0x89,0x8c,0x8f,0x8e,0x8d,0x88,0x8b,0x81,0x82,0x87,0x84,0x85,0x86,0x83,0x80,0xba,0xb9,0xbc,0xbf,0xbe,0xbd,0xb8,0xbb,0xb1,0xb2,0xb7,0xb4,0xb5,0xb6,0xb3,0xb0,0x1a,0x19,0x1c,0x1f,0x1e,0x1d,0x18,0x1b,0x11,0x12,0x17,0x14,0x15,0x16,0x13,0x10,0x2a,0x29,0x2c,0x2f,0x2e,0x2d,0x28,0x2b,0x21,0x22,0x27,0x24,0x25,0x26,0x23,0x20,0x7a,0x79,0x7c,0x7f,0x7e,0x7d,0x78,0x7b,0x71,0x72,0x77,0x74,0x75,0x76,0x73,0x70,0x4a,0x49,0x4c,0x4f,0x4e,0x4d,0x48,0x4b,0x41,0x42,0x47,0x44,0x45,0x46,0x43,0x40,0x5a,0x59,0x5c,0x5f,0x5e,0x5d,0x58,0x5b,0x51,0x52,0x57,0x54,0x55,0x56,0x53,0x50,0x6a,0x69,0x6c,0x6f,0x6e,0x6d,0x68,0x6b,0x61,0x62,0x67,0x64,0x65,0x66,0x63,0x60,0x3a,0x39,0x3c,0x3f,0x3e,0x3d,0x38,0x3b,0x31,0x32,0x37,0x34,0x35,0x36,0x33,0x30,0xa,0x9,0xc,0xf,0xe,0xd,0x8,0xb,0x1,0x2,0x7,0x4,0x5,0x6,0x3,0x0]
	rcon = [0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d]
	
	def __init__(self,tweak):
		self.key = secrets.randbits(128)
		self.round_keys = self.KeySchedule()
		self.tweak = []
		for i in range(4):
			self.tweak.extend([((tweak >> (56 - 8*j - 2*8*i)) & 0xff) for j in range(2)])
			self.tweak.extend([0,0])

	def KeySchedule(self):
		keys = [[((self.key >> (120 - 8*j)) & 0xff) for j in range(16)]]
		for i in range(10):
			tmp_key = [0 for _ in range(16)]
			tmp_key[0] = keys[-1][0] ^ self.sbox[keys[-1][13]] ^ self.rcon[i]
			tmp_key[1] = keys[-1][1] ^ self.sbox[keys[-1][14]]
			tmp_key[2] = keys[-1][2] ^ self.sbox[keys[-1][15]]
			tmp_key[3] = keys[-1][3] ^ self.sbox[keys[-1][12]]
			for j in range(4,16):
				tmp_key[j] = tmp_key[j - 4] ^ keys[-1][j]
			keys.append(tmp_key)
		return keys

	def mul2(x): # helper function for MixColumns
		if (x >> 7) == 0: return x << 1
		else: return (x << 1) ^ 0b100011011

	def mul3(x): # helper function for MixColumns
		return Cipher.mul2(x) ^ x

	def ShiftRows(self,state):
		newState = [0 for _ in range(16)]
		for r in range(4):
			for c in range(4):
				newState[4*c + r] = state[4*((c+r) % 4) + r % 4]
		return newState

	# change this to column wise matrix
	def MixColumns(self,state):
		newState = [0 for _ in range(16)]
		for i in range(4):
			newState[0+4*i] = Cipher.mul2(state[0+4*i]) ^ Cipher.mul3(state[1+4*i]) ^ state[2+4*i] ^ state[3+4*i]
			newState[1+4*i] = state[0+4*i] ^ Cipher.mul2(state[1+4*i]) ^ Cipher.mul3(state[2+4*i]) ^ state[3+4*i]
			newState[2+4*i] = state[0+4*i] ^ state[1+4*i] ^ Cipher.mul2(state[2+4*i]) ^ Cipher.mul3(state[3+4*i])
			newState[3+4*i] = Cipher.mul3(state[0+4*i]) ^ state[1+4*i] ^ state[2+4*i] ^ Cipher.mul2(state[3+4*i])
		return newState

	def Substitution(self,state):
		for i in range(16):
			state[i] = self.sbox[state[i]]
		return state

	def AddRoundTweakey(self,state,key,tweak):
		for i in range(16):
			state[i] = state[i] ^ tweak[i] ^ key[i]
		return state

	def enc_one_round(self,state,key,tweak):
		state = self.Substitution(state)
		state = self.ShiftRows(state)
		state = self.MixColumns(state)
		state = self.AddRoundTweakey(state,key,tweak)
		return state

	def encrypt_block(self,state):

		state = self.AddRoundTweakey(state,self.round_keys[0],self.tweak)
		for i in range(9):
			state = self.enc_one_round(state,self.round_keys[i+1],self.tweak)
		state = self.Substitution(state)
		state = self.ShiftRows(state)
		state = self.AddRoundTweakey(state,self.round_keys[10],self.tweak)
		return state

	def pad(self,msg): # PKCS#7 padding
		padding_len = 16 - (len(msg) % 16)
		padding = bytes([padding_len] * padding_len)
		return msg + padding

	def encrypt_ecb(self,msg):
		msg_bytes = bytearray(msg)
		msg_padded = self.pad(msg_bytes).hex()
		msg_padded = [int(msg_padded[2*i:2*i+2],16) for i in range(0,len(msg_padded)//2)]
		encrypted = ''
		for i in range(len(msg_padded)//16):
			output = self.encrypt_block(msg_padded[16*i:16*i+16])
			encrypted += ''.join([hex(h)[2:].zfill(2) for h in output])
		return encrypted

	inv_sbox = [0xff,0xf8,0xf9,0xfe,0xfb,0xfc,0xfd,0xfa,0xf6,0xf1,0xf0,0xf7,0xf2,0xf5,0xf4,0xf3,0x8f,0x88,0x89,0x8e,0x8b,0x8c,0x8d,0x8a,0x86,0x81,0x80,0x87,0x82,0x85,0x84,0x83,0x9f,0x98,0x99,0x9e,0x9b,0x9c,0x9d,0x9a,0x96,0x91,0x90,0x97,0x92,0x95,0x94,0x93,0xef,0xe8,0xe9,0xee,0xeb,0xec,0xed,0xea,0xe6,0xe1,0xe0,0xe7,0xe2,0xe5,0xe4,0xe3,0xbf,0xb8,0xb9,0xbe,0xbb,0xbc,0xbd,0xba,0xb6,0xb1,0xb0,0xb7,0xb2,0xb5,0xb4,0xb3,0xcf,0xc8,0xc9,0xce,0xcb,0xcc,0xcd,0xca,0xc6,0xc1,0xc0,0xc7,0xc2,0xc5,0xc4,0xc3,0xdf,0xd8,0xd9,0xde,0xdb,0xdc,0xdd,0xda,0xd6,0xd1,0xd0,0xd7,0xd2,0xd5,0xd4,0xd3,0xaf,0xa8,0xa9,0xae,0xab,0xac,0xad,0xaa,0xa6,0xa1,0xa0,0xa7,0xa2,0xa5,0xa4,0xa3,0x6f,0x68,0x69,0x6e,0x6b,0x6c,0x6d,0x6a,0x66,0x61,0x60,0x67,0x62,0x65,0x64,0x63,0x1f,0x18,0x19,0x1e,0x1b,0x1c,0x1d,0x1a,0x16,0x11,0x10,0x17,0x12,0x15,0x14,0x13,0xf,0x8,0x9,0xe,0xb,0xc,0xd,0xa,0x6,0x1,0x0,0x7,0x2,0x5,0x4,0x3,0x7f,0x78,0x79,0x7e,0x7b,0x7c,0x7d,0x7a,0x76,0x71,0x70,0x77,0x72,0x75,0x74,0x73,0x2f,0x28,0x29,0x2e,0x2b,0x2c,0x2d,0x2a,0x26,0x21,0x20,0x27,0x22,0x25,0x24,0x23,0x5f,0x58,0x59,0x5e,0x5b,0x5c,0x5d,0x5a,0x56,0x51,0x50,0x57,0x52,0x55,0x54,0x53,0x4f,0x48,0x49,0x4e,0x4b,0x4c,0x4d,0x4a,0x46,0x41,0x40,0x47,0x42,0x45,0x44,0x43,0x3f,0x38,0x39,0x3e,0x3b,0x3c,0x3d,0x3a,0x36,0x31,0x30,0x37,0x32,0x35,0x34,0x33]

	def invSubstitution(self,state):
		for i in range(16):
			state[i] = self.inv_sbox[state[i]]
		return state

	def invShiftRows(self,state):
		for _ in range(3):
			state = self.ShiftRows(state)
		return state
	
	def invMixColumns(self,state):
		for _ in range(3):
			state = self.MixColumns(state)
		return state

	def dec_one_round(self,state,key,tweak):
		state = self.AddRoundTweakey(state,key,tweak)
		state = self.invMixColumns(state)
		state = self.invShiftRows(state)
		state = self.invSubstitution(state)
		return state

	def decrypt_block(self,state):
		state = self.AddRoundTweakey(state,self.round_keys[10],self.tweak)
		state = self.invShiftRows(state)
		state = self.invSubstitution(state)
		for i in range(10,1,-1):
			state = self.dec_one_round(state,self.round_keys[i-1],self.tweak)
		state = self.AddRoundTweakey(state,self.round_keys[0],self.tweak)
		return state

	def decrypt_ecb(self,ciphertext):
		decrypted = ''
		for i in range(len(ciphertext)//32):
			output = self.decrypt_block([int(ciphertext[j:j+2],16) for j in range(32*i,32*i+32,2)])
			decrypted += ''.join([hex(h)[2:].zfill(2) for h in output])
		return bytes.fromhex(decrypted)


plaintexts = [
b"Harnessing cutting-edge digital innovations and solutions",
b"Design. Develop. Defend.", 
b"Be a part of the tech community",
b"Integrity. Innovation. Teamwork. Agility. Learning.",
b"root@csit:~# ./future",
b"Secure the digital world. Be the first line of defense.",
b"Join the battle against cyber threats and keep information safe.",
b"Guard the digital frontier and make a real impact.", 
b"Be the shield that protects against online dangers.",
b"?????????????????????????????????",
]


# cipher = Cipher(0x1010101010101010)
# ciphertexts = []
# for plaintext in plaintexts:
# 	ciphertext = cipher.encrypt_ecb(plaintext)
# 	ciphertexts.append(ciphertext)
# 	print(ciphertext)

# # outputs
ciphertexts = [
b'a128c60763025412a44dfaf819e949f655a268d35d695495ddf070129a3bfe1037f86eb77b717671c4f70bf9367293fa3d1b3837a6b71108638e16762167e0c3',
b'd2c002f20002df676296ea80874ac07ae5ad0b3a3366d47d8a5d4c9f138b21b8',
b'83617f6b832f054a515d8b104ddb62f58043e40d59287bdd796924cd14cb7665',
b'288c2f644f03a5e665fd3fbcc55246d76db1132f0fcee3ad58bdb210728a495a7f9bdab320a68d5d3bdf1d4b5084dad5db982bee4f1d1bdcd8e7b80a5e455a55',
b'b6ecbb8e36e901e6c6a561a9ec366a83918cd5f9b8efe1e8921fb6944d5d233b',
b'757069e4e785688a1d8b067910d719e20d61693a7bdb5eb61885fa61ed6b81ad239b901a3111c24a5e186cbf5e946a52872f8013660bcbf8ac6ab64f416143e4',
b'59281b1bead825b2aa5e0a363bdd4029805968ccf463084b53c3c7bc1c38a531432fd52da7f6931849cc6a5d870d801e8a137f2ae659540610ffff68fe56111a6defca218e5802eeb46473209dbb3c6c',
b'233e4bfb2af0b41ecf07a28b292c16a5a5a685d771d751881e6ea5ff1f742cf4d8d41cd63d3bf4c0bfae77fc96d9bd78694b799f8c1026a7774762cd1a6b69e4',
b'799ae1d0c87431b24057034e076940004dd894c186c16da4a2239734fcc7a85ef40290e02b09718c2a1598f9028ae2c64a635a1c9f1cb0377cd7bf4cb994ed77',
b'0697e1dae2225429fcebf68ca0ded61c8a091a3ad7ed7860d43be87c62b70aebf5ce4615903a3d2a219cabc9ce2f4a35',
]


# Resources that might help you out
# Addition and Substraction in bits is equivalent to the XOR operation: https://en.wikipedia.org/wiki/GF(2)
# Linear Approximation Table: https://gist.github.com/mimoo/b2387d45fbbfcbb30553d791ed4b0ff7
# Difference Distribution Table: https://crypto.stackexchange.com/questions/30173/how-to-build-a-difference-distribution-table